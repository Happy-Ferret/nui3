//
// Gui.css
//
// NUI3 - C++ cross-platform GUI framework for OpenGL based applications
// Copyright (C) 2002-2003 Sebastien Metrot
//
// licence: see nui3/LICENCE.TXT
//

//@nuiFrame dGui
//{
//  Texture: "rsrc:/decorations/bg-brushed_metal.png";
//  ClientRect: "{0 0 220 225}";
//}
//
//Gui!
//{
//  Decoration: dGui;
//}

"ImageTitle"!
{
  Texture: "rsrc:/decorations/title.png";
  BorderLeft: 10;
  BorderTop: 10;
}



//************************************************************************
//
// nuiStateDecoration
//
// With a nuiStateDecoration, a widget can get a decoration for every state
// it could have during runtime. It's the perfect decoration for a roll-over 
// button for instance.
// To each attribute, you can assign a bitmap filename, as shown below, or a
// decoration reference. In that case, the decoration must have been declared 
// above the stateDecoration (or in another css stylesheet, included before this
// current one.
//
@nuiStateDecoration dButtonStart
{
  OnUp: "rsrc:/decorations/buttonStartUp.png";
  OnUpHover: "rsrc:/decorations/buttonStartUpHover.png";
  OnDown: "rsrc:/decorations/buttonStartDown.png";
  OnDownHover: "rsrc:/decorations/buttonStartDownHover.png";
  
  // you could also use a map for the following states if you need:
  // OnSelected, OnDisabled, OnDisabledSelected, OnUpDisabled, OnDownDisabled
  // please have a look to nuiStateDecoration.h
}


"ButtonStart"!
{
  DecorationMode: Border;
  Decoration: dButtonStart;
}




//************************************************************************
//
// nuiFrame
//
// A nuiFrame applyes an image depending on the ClienRect attribute value.
//
// Let's say you've got an image, with a size of W pixels x H pixels.
// The clientRect: "{x y w h}" defines the border zone around the widget, 
// and the client area which the widget is drawn in. 
// W = (x * 2) + w, and H = (y * 2) + h
// 
// 
//

@nuiFrame dguiOscillo
{
  Texture: "rsrc:/decorations/oscilloBackground.png";
  ClientRect: "{2 2 4 4}";
}

guiOscillo!
{
  DecorationMode: Border;
  Decoration: dguiOscillo;
  UserRect: "{0 0 400 170}";
  // you could also use UserWidth:400 and UserHeight:170
  BorderRight: 20;
}



@nuiGradientDecoration dText
{
  Orientation: Vertical;
  StrokeSize: 1;
  Color1: ClrGradient1;
  Color2: rgb(210,210,210);
  StrokeColor: rgb(32,32,32);
  ShapeMode: StrokeAndFill;
  Offset1: 0;
  Offset2: 0.5;
  
  ClientRect: "{10 10 0 0}";
}

"Text"!
{
  Font: FontText;
  TextColor:gray;
  
  DecorationMode: Border;
  Decoration: dText;
}


"SliderQ"!
{
  UserWidth: 200;
}

// don't forget to add a blank ending line, otherwise the css parsing will fail!

