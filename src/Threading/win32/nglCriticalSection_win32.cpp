

// Include
#include "nui.h"
#include "nglCriticalSection.h"
#include "nglThreadChecker.h"


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Thread class.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class nglCriticalSectionPrivate 
{
  friend class nglCriticalSection;
private:
  CRITICAL_SECTION	mCriticalSection;
};


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		Constructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Constructor of CriticalSection class 
//

nglCriticalSection::nglCriticalSection(bool registerToThreadChecker)
: nglLock(registerToThreadChecker)
{
  mpPrivate = new nglCriticalSectionPrivate();
  InitializeCriticalSection(&mpPrivate->mCriticalSection);
}

nglCriticalSection::nglCriticalSection(const nglString& rName, bool registerToThreadChecker)
: nglLock(rName, registerToThreadChecker)
{
  mpPrivate = new nglCriticalSectionPrivate();
  InitializeCriticalSection(&mpPrivate->mCriticalSection);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		Destructor
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Destructor of CriticalSection class 
//
nglCriticalSection::~nglCriticalSection()
{
  DeleteCriticalSection(&mpPrivate->mCriticalSection);
  delete mpPrivate;
}

const nglString& nglCriticalSection::GetLabel() const
{
  static const nglString lbl(_T("critical section"));
  return lbl;
}







///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		_Lock, virtual from nglLock
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	 
//

void nglCriticalSection::_Lock(nglThread::ID threadID)
{
  EnterCriticalSection(&mpPrivate->mCriticalSection);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		_Unlock, virtual from nglLock
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	 
//
void nglCriticalSection::_Unlock()
{
  LeaveCriticalSection(&mpPrivate->mCriticalSection);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		_TryLock, virtual from nglLock
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	 
//
bool nglCriticalSection::_TryLock(nglThread::ID threadID)
{
  BOOL res = ::TryEnterCriticalSection(&mpPrivate->mCriticalSection);

  return (res != 0);
}

CRITICAL_SECTION& nglCriticalSection::GetNativeHandle() const
{
  return mpPrivate->mCriticalSection;
}


