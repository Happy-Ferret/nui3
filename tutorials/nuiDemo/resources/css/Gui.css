//
// Gui.css
//
// NUI3 - C++ cross-platform GUI framework for OpenGL based applications
// Copyright (C) 2002-2003 Sebastien Metrot
//
// licence: see nui3/LICENCE.TXT
//
//

@nuiGradientDecoration dGui
{
  Color1: rgb(16,16,16);
  Color2: rgb(16,16,16);
  Color3: rgb(39,34,31);
  Color4: rgb(64,64,64);
  Offset1: 0;
  Offset2: 0.4;
  Offset3: 0.6;
  Offset4: 1;
  Orientation: Vertical;
  ShapeMode: Fill;
}


Gui!
{
  Decoration: dGui;
}




@nuiFrame dButtonTitle
{
  Texture: "rsrc:/decorations/title.png";
}

"ButtonTitle"!
{
  Decoration: dButtonTitle;
  BorderLeft: 25;
  BorderTop: 10;
  BorderBottom: 10;
}



//************************************************************************
//
// nuiStateDecoration
//
// With a nuiStateDecoration, a widget can get a decoration for every state
// it could have during runtime. It's the perfect decoration for a roll-over 
// button for instance.
// To each attribute, you can assign a bitmap filename, as shown below, or a
// decoration reference. In that case, the decoration must have been declared 
// above the stateDecoration (or in another css stylesheet, included before this
// current one.
//




@nuiStateDecoration dButtonStartBkg
{
  OnUp: "rsrc:/decorations/buttonStartUp.png";
  OnUpHover: "rsrc:/decorations/buttonStartUpHover.png";
  OnDown: "rsrc:/decorations/buttonStartDown.png";
  OnDownHover: "rsrc:/decorations/buttonStartDownHover.png";
  
  // you could also use a map for the following states if you need:
  // OnSelected, OnDisabled, OnDisabledSelected, OnUpDisabled, OnDownDisabled
  // please have a look to nuiStateDecoration.h
}


"ButtonStart"!
{
  DecorationMode: Border;
  Decoration: dButtonStartBkg;
}




//************************************************************************
//
// nuiFrame
//
// A nuiFrame applyes an image depending on the ClienRect attribute value.
//
// Let's say you've got an image, with a size of W pixels x H pixels.
// The clientRect: "{x y w h}" defines the border zone around the widget, 
// and the client area which the widget is drawn in. 
// W = (x * 2) + w, and H = (y * 2) + h
// 
// 
//

@nuiFrame dguiOscilloBackground
{
  Texture: "rsrc:/decorations/oscilloBackground.png";
}

"guiOscilloBackground"!
{
  DecorationMode: Border;
  Decoration: dguiOscilloBackground;
  UserRect: "{0 0 280 131}";
  BorderBottom: 5;
}




@nuiFrame dguiOscillo
{
  Texture: "rsrc:/decorations/oscilloGloss.png";
  Layer: Front;
  ClientRect: "{10 12 270 116}";
}


guiOscillo!
{
  DecorationMode: Border;
  Decoration: dguiOscillo;
}


@nuiStateDecoration dButtonSwitch
{
  OnUp: "rsrc:/decorations/switchUp.png";
  OnDown: "rsrc:/decorations/switchDown.png";
}

"ButtonSwitch"!
{
  Decoration: dButtonSwitch;
  BorderLeft: 25;
  BorderRight: 30;
  BorderTop: 55;
}

@nuiFrame dPaneBkg
{
  Texture: "rsrc:/decorations/pane.png";
  ClientRect: "{12 12 4 130}";
}

"PaneBkg"!
{
  DecorationMode: Border;
  Decoration: dPaneBkg;
}


"Text"!
{
  Font: FontText;
  TextColor:gray;
}


"SliderVolume"!
{
  UserWidth: 150;
  UserHeight: 25;
}



@nuiFrame dSliderBkg
{
  Texture: "rsrc:/decorations/sliderBkg.png";
  ClientRect: "{3 0 1 4}";
}

@nuiFrame dSliderHandle
{
  Texture: "rsrc:/decorations/sliderHandle.png";
  ClientRect: "{0 0 39 25}";
}


//"KnobFrequency"!
//{
//  UserWidth: 50;
//  UserHeight: 50;
//}

// don't forget to add a blank ending line, otherwise the css parsing will fail!

